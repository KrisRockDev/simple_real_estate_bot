import asyncio
import logging
import os
import re
import sys
from datetime import datetime
from icecream import ic
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, InputMediaPhoto  # InputMediaPhoto –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞
from dotenv import load_dotenv
from create_cian import format_price  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
from parser import parse_cian
from settings import cookies, headers

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID_STR = os.getenv("CHAT_ID")
ADMIN_CHAT_ID = None

if not BOT_TOKEN:
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TOKEN) –≤ .env —Ñ–∞–π–ª–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    sys.exit(1)

if ADMIN_CHAT_ID_STR:
    try:
        ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_STR)
    except ValueError:
        logger.error("CHAT_ID –≤ .env –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
else:
    logger.warning("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –¶–∏–∞–Ω (–∫–≤–∞—Ä—Ç–∏—Ä—ã)
URL_PATTERN = re.compile(r"^https://www\.cian\.ru/sale/flat/\d+/?$", re.IGNORECASE)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¶–∏–∞–Ω.\n\n"
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "üîπ `https://www.cian.ru/sale/flat/123456789/`\n\n"
    "–Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ—ë –∏ –ø—Ä–∏—à–ª—é –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ PDF-–æ—Ç—á–µ—Ç–∞, "
    "—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)."
)

MAX_CAPTION_LENGTH = 1024
MAX_MESSAGE_LENGTH = 4096


def escape_md(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V1 –¥–ª—è aiogram.
    –í–∞–∂–Ω–æ: `\` —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ \.
    """
    if not isinstance(text, str):
        text = str(text)
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ aiogram –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ Markdown V1 —Å—É—â–Ω–æ—Å—Ç–∏: *, _, `, [
    # –¢–∞–∫–∂–µ \ –∫–∞–∫ —Å–∏–º–≤–æ–ª —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    # ] –≤–∞–∂–µ–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫ [text] –∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —Å–∏–º–≤–æ–ª.
    text = text.replace('\\', '\\\\')
    text = text.replace('*', r'\*')
    text = text.replace('_', r'\_')
    text = text.replace('`', r'\`')
    text = text.replace('[', r'\[')
    text = text.replace(']', r'\]')
    return text


def format_short_caption(data: dict, url: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è PDF —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    if not data:
        return escape_md("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    title_orig = data.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    address_orig = data.get('adress', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
    price_val = data.get('price', "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ format_price
    if price_val != "–Ω–µ —É–∫–∞–∑–∞–Ω–∞":
        # –§—É–Ω–∫—Ü–∏—è format_price –∏–∑ create_cian.py –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        actual_formatted_price = format_price(str(price_val))
    else:
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, format_price –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞" –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ
        # –õ–∏–±–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        actual_formatted_price = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
    title_escaped = escape_md(title_orig)
    address_escaped = escape_md(address_orig)
    price_display_escaped = escape_md(actual_formatted_price)

    params_parts_escaped = []
    if isinstance(data.get('params'), dict):
        params_data = data['params']
        if params_data.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å'):
            params_parts_escaped.append(f"–û–±—â.–ø–ª: {escape_md(str(params_data['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å']))} –º¬≤")
        if params_data.get('–≠—Ç–∞–∂'):
            params_parts_escaped.append(f"–≠—Ç–∞–∂: {escape_md(str(params_data['–≠—Ç–∞–∂']))}")
    params_str_escaped_joined = ", ".join(params_parts_escaped)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    parts_md_version = [
        f"*{title_escaped}*",
        f"üìç {address_escaped}",
        f"üí∞ {price_display_escaped}",
    ]
    if params_str_escaped_joined:
        parts_md_version.append(f"üìè {params_str_escaped_joined}")
    base_text_md_version = "\n".join(parts_md_version)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ (–æ–Ω–∏ –≤—Å–µ–≥–¥–∞ —Å Markdown)
    # –¢–µ–∫—Å—Ç "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –¶–∏–∞–Ω" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. URL —Ç–æ–∂–µ.
    link_part = f"\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –¶–∏–∞–Ω]({url})"

    bot_username_orig = os.getenv("TELEGRAM_BOT_USERNAME", "kriss_real_estate_bot")  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º—è –±–µ–∑ @
    bot_link_env = os.getenv("TELEGRAM_BOT_LINK")
    # ic(bot_username_orig, bot_link_env) # –û—Å—Ç–∞–≤—å—Ç–µ –¥–ª—è –≤–∞—à–µ–π –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    if bot_link_env:
        # –¢–µ–∫—Å—Ç –¥–ª—è —Å—Å—ã–ª–∫–∏: –≤ Markdown V1 –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ [—Ç–µ–∫—Å—Ç]
        # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã ']' –∏ '\'.
        # –°–∏–º–≤–æ–ª—ã '_' –∏ '*' –Ω–µ —Ç—Ä–µ–±—É—é—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å.

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏.
        # –ï—Å–ª–∏ –≤ TELEGRAM_BOT_USERNAME –µ—Å—Ç—å '@', –æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏.
        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –±–µ–∑ '@', —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_USERNAME –µ–≥–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç.
        link_text_content = bot_username_orig

        escaped_link_text = link_text_content.replace('\\', '\\\\').replace(']', r'\]')

        # –î–æ–±–∞–≤–ª—è–µ–º .strip() –∫ URL –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ .env –µ—Å—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        clean_bot_link_env = bot_link_env.strip()

        link_bot = f"\n–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞:\n[{escaped_link_text}]({clean_bot_link_env})"
    else:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç @username.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "—á–∏—Å—Ç–æ–µ" (–±–µ–∑ '@' –≤ –Ω–∞—á–∞–ª–µ, —Ç.–∫. –º—ã –µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º).
        clean_username_for_mention = bot_username_orig.lstrip('@')
        # –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç Markdown-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã.
        link_bot = f"\n–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞: @{clean_username_for_mention}"

    caption_links_combined = '' + link_bot
    len_links = len(caption_links_combined)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –≤–µ—Ä—Å–∏—è —Å Markdown
    if len(base_text_md_version) + len_links <= MAX_CAPTION_LENGTH:
        return base_text_md_version + caption_links_combined
    else:
        # Markdown-–≤–µ—Ä—Å–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –§–æ—Ä–º–∏—Ä—É–µ–º plain text –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ (–Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è Markdown) –∑–Ω–∞—á–µ–Ω–∏—è, —Ç.–∫. escape_md –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ–∑–∂–µ –∫–æ –≤—Å–µ–º—É –±–ª–æ–∫—É.
        plain_parts_list = [
            title_orig,
            f"üìç {address_orig}",
            f"üí∞ {actual_formatted_price}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
        ]
        if isinstance(data.get('params'), dict):  # –°–æ–±–∏—Ä–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è plain text
            params_data_orig = data['params']
            params_orig_str_list = []
            if params_data_orig.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å'):
                params_orig_str_list.append(f"–û–±—â.–ø–ª: {str(params_data_orig['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å'])} –º¬≤")
            if params_data_orig.get('–≠—Ç–∞–∂'):
                params_orig_str_list.append(f"–≠—Ç–∞–∂: {str(params_data_orig['–≠—Ç–∞–∂'])}")
            if params_orig_str_list:
                plain_parts_list.append(f"üìè {', '.join(params_orig_str_list)}")

        base_text_plain_joined = "\n".join(plain_parts_list)

        available_space_for_plain_text = MAX_CAPTION_LENGTH - len_links - 3  # 3 for "..."

        if available_space_for_plain_text < 10:  # –ï—Å–ª–∏ –º–µ—Å—Ç–∞ —Å–æ–≤—Å–µ–º –º–∞–ª–æ
            trimmed_plain_text = "–ò–Ω—Ñ–æ..."
        else:
            trimmed_plain_text = base_text_plain_joined[:available_space_for_plain_text] + "..."

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫
        return escape_md(trimmed_plain_text) + caption_links_combined


def format_full_message_text(data: dict, url: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏."""
    if not data:
        return escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é.")

    title_orig = data.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    address_orig = data.get('adress', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
    price_val = data.get('price', "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    if price_val != "–Ω–µ —É–∫–∞–∑–∞–Ω–∞":
        actual_formatted_price = format_price(str(price_val))
    else:
        actual_formatted_price = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    text_parts = [
        f"*{escape_md(title_orig)}*",  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ Markdown *...*
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –¶–∏–∞–Ω]({url})\n"  # URL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è Telegram, —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω
    ]

    text_parts.append(f"üè∑Ô∏è *–¶–µ–Ω–∞*: {escape_md(actual_formatted_price)}")
    if isinstance(data.get('offer'), dict) and data['offer'].get('–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä'):
        text_parts.append(f"–º¬≤: {escape_md(str(data['offer']['–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä']))}")
    if isinstance(data.get('offer'), dict) and data['offer'].get('–ò–ø–æ—Ç–µ–∫–∞'):
        text_parts.append(f"–ò–ø–æ—Ç–µ–∫–∞: {escape_md(str(data['offer']['–ò–ø–æ—Ç–µ–∫–∞']))}")
    text_parts.append(f"üìç *–ê–¥—Ä–µ—Å*: {escape_md(address_orig)}\n")

    if isinstance(data.get('params'), dict):
        text_parts.append("üìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã:*")
        params_data = data['params']
        p_list = []
        for key, value in params_data.items():
            key_escaped = escape_md(str(key))
            value_escaped = escape_md(str(value))
            if key in ['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å', '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏']:
                p_list.append(f"  ‚Ä¢ {key_escaped}: {value_escaped} –º¬≤")
            elif key == '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤':
                p_list.append(f"  ‚Ä¢ {key_escaped}: {value_escaped} –º")
            else:
                p_list.append(f"  ‚Ä¢ {key_escaped}: {value_escaped}")
        text_parts.append("\n".join(p_list))
        text_parts.append("")

    if isinstance(data.get('metro'), list) and data['metro']:
        text_parts.append("üöá *–ú–µ—Ç—Ä–æ —Ä—è–¥–æ–º:*")
        for station_info in data['metro']:
            station = escape_md(str(station_info.get('station', 'N/A')))
            method = escape_md(str(station_info.get('method', 'N/A')))
            time = escape_md(str(station_info.get('time', 'N/A')))
            text_parts.append(f"  ‚Ä¢ {station} ({method} {time})")
        text_parts.append("")

    if data.get('description'):
        # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML <br>, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ \n –î–û —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        description_orig = str(data['description']).replace('<br>', '\n').replace('<br/>', '\n')
        text_parts.append("üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*")
        text_parts.append(escape_md(description_orig))
        text_parts.append("")

    if isinstance(data.get('agent'), dict):
        text_parts.append("üë§ *–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*")
        for key, value in data['agent'].items():
            text_parts.append(f"  ‚Ä¢ {escape_md(str(key))}: {escape_md(str(value))}")
        text_parts.append("")

    if isinstance(data.get('author_branding'), dict):
        text_parts.append("üè¢ *–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ/–†–∏–µ–ª—Ç–æ—Ä (–±—Ä–µ–Ω–¥–∏–Ω–≥):*")
        branding = data['author_branding']
        if branding.get('agency_name'):
            text_parts.append(f"  ‚Ä¢ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ: {escape_md(str(branding['agency_name']))}")
        if branding.get('realtor_name'):
            text_parts.append(f"  ‚Ä¢ –†–∏–µ–ª—Ç–æ—Ä: {escape_md(str(branding['realtor_name']))}")
        text_parts.append("")

    if isinstance(data.get('developer'), dict):
        text_parts.append("üèóÔ∏è *–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫:*")
        dev = data['developer']
        for key, value in dev.items():
            text_parts.append(f"  ‚Ä¢ {escape_md(str(key))}: {escape_md(str(value))}")
        text_parts.append("")

    if isinstance(data.get('rosreestr'), dict):
        text_parts.append("üìú *–î–∞–Ω–Ω—ã–µ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):*")
        ros_info = data['rosreestr']
        for key, value in ros_info.items():
            text_parts.append(f"  ‚Ä¢ {escape_md(str(key))}: {escape_md(str(value))}")
        text_parts.append("")

    if isinstance(data.get('offer_metadata'), dict):
        meta = data['offer_metadata']
        text_parts.append("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*")
        if meta.get('updated_date'):
            text_parts.append(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {escape_md(str(meta['updated_date']))}")
        if meta.get('updated_datetime') and isinstance(meta['updated_datetime'], datetime):
            text_parts.append(
                f"  ‚Ä¢ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (UTC): {escape_md(meta['updated_datetime'].strftime('%Y-%m-%d %H:%M:%S'))}")
        if meta.get('views_stats'):
            text_parts.append(f"  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {escape_md(str(meta['views_stats']))}")
        text_parts.append("")

    full_text = "\n".join(text_parts)
    if len(full_text) > MAX_MESSAGE_LENGTH:  # –û–±—Ä–µ–∑–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Markdown, —Ç.–∫. –æ–Ω —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω)
        full_text = full_text[:MAX_MESSAGE_LENGTH - 4] + "\n..."  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å, –µ—Å–ª–∏ —Å—Ä–µ–∑ –Ω–µ—É–¥–∞—á–Ω—ã–π
        # –ù–æ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–∞–ª–∞.
        # –î–ª—è –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ plain text –ø—Ä–∏ –æ–±—Ä–µ–∑–∞–Ω–∏–∏.
        # –ù–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, —Ç.–∫. –æ—à–∏–±–∫–∞ –±—ã–ª–∞ —Å caption.
    return full_text


@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(WELCOME_MESSAGE, parse_mode="Markdown")


@dp.message(F.text)
async def process_cian_url(message: types.Message, current_bot: Bot = bot):
    url = message.text.strip()
    user_id = message.from_user.id
    is_admin_request = ADMIN_CHAT_ID is not None and user_id == ADMIN_CHAT_ID

    if not URL_PATTERN.match(url):
        await message.answer(
            "üö´ *–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å `www.cian.ru`.\n"
            "–ü—Ä–∏–º–µ—Ä: `https://www.cian.ru/sale/flat/123456789/`",
            parse_mode="Markdown"
        )
        return

    processing_msg = await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {escape_md(url)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")  # URL —Ç–æ–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞

    try:
        if sys.version_info >= (3, 9):
            report_path, result_data = await asyncio.to_thread(parse_cian, url, cookies, headers)
        else:
            loop = asyncio.get_event_loop()
            report_path, result_data = await loop.run_in_executor(None, parse_cian, url, cookies, headers)

        if not result_data:
            error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¶–∏–∞–Ω."
            # error_text —É–∂–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç.–∫. –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ Markdown
            await message.answer(error_text)
            if ADMIN_CHAT_ID and not is_admin_request:
                await current_bot.send_message(chat_id=ADMIN_CHAT_ID,
                                               text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {escape_md(url)} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}):\n{error_text}")
            return

        short_caption = format_short_caption(result_data, url)
        pdf_sent_to_user = False
        if report_path and os.path.exists(report_path):
            try:
                pdf_document_for_user = FSInputFile(report_path)
                await message.answer_document(document=pdf_document_for_user, caption=short_caption,
                                              parse_mode="Markdown")
                pdf_sent_to_user = True
                if ADMIN_CHAT_ID and not is_admin_request:
                    pdf_document_for_admin = FSInputFile(report_path)
                    admin_caption = f"–û—Ç—á–µ—Ç –ø–æ {escape_md(url)} (–∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}):\n{short_caption}"
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ admin_caption –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                    if len(admin_caption) > MAX_CAPTION_LENGTH:
                        admin_caption = admin_caption[:MAX_CAPTION_LENGTH - 3] + "..."
                    await current_bot.send_document(chat_id=ADMIN_CHAT_ID, document=pdf_document_for_admin,
                                                    caption=admin_caption,
                                                    parse_mode="Markdown")
            except Exception as e_pdf:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF ({report_path}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_pdf}")
                # short_caption —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ–±—Ä–µ–∑–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
                fallback_text_user = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç. {short_caption}"
                await message.answer(fallback_text_user, parse_mode="Markdown")
                if ADMIN_CHAT_ID and not is_admin_request:
                    # –ó–¥–µ—Å—å short_caption –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
                    admin_error_text = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF ({escape_md(report_path)}) –¥–ª—è {escape_md(url)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {escape_md(str(e_pdf))}\n–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {short_caption}"
                    if len(admin_error_text) > MAX_MESSAGE_LENGTH:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MAX_MESSAGE_LENGTH –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        admin_error_text = admin_error_text[
                                           :MAX_MESSAGE_LENGTH - 100] + "..."  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –∏ –∑–∞–ø–∞—Å–∞
                    await current_bot.send_message(chat_id=ADMIN_CHAT_ID,
                                                   text=admin_error_text,
                                                   parse_mode="Markdown")
        else:
            logger.warning(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ PDF –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {report_path} –¥–ª—è URL: {url}")
            await message.answer(short_caption, parse_mode="Markdown")  # short_caption –±–µ–∑–æ–ø–∞—Å–µ–Ω
            if ADMIN_CHAT_ID and not is_admin_request:
                admin_text = f"–û—Ç—á–µ—Ç –ø–æ {escape_md(url)} (PDF –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}):\n{short_caption}"
                if len(admin_text) > MAX_MESSAGE_LENGTH:
                    admin_text = admin_text[:MAX_MESSAGE_LENGTH - 3] + "..."
                await current_bot.send_message(chat_id=ADMIN_CHAT_ID,
                                               text=admin_text,
                                               parse_mode="Markdown")

        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –¥–ª—è full_text –∏ images –æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏,
        # –Ω–æ –∫ –Ω–∏–º —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ª–æ–≥–∏–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è escape_md.

    except asyncio.CancelledError:
        logger.warning(f"–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        error_message_user = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è."
        await message.answer(error_message_user)  # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Markdown, –±–µ–∑–æ–ø–∞—Å–Ω–æ

        if ADMIN_CHAT_ID and not is_admin_request:
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
            error_message_admin = f"‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {escape_md(url)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n–¢–∏–ø: {escape_md(type(e).__name__)}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {escape_md(str(e))}"
            await current_bot.send_message(chat_id=ADMIN_CHAT_ID, text=error_message_admin[:MAX_MESSAGE_LENGTH - 100])
    finally:
        try:
            await current_bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        except Exception:
            pass


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")